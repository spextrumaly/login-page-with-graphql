{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { ApolloClient, InMemoryCache } from 'apollo-boost';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport fetch from 'isomorphic-unfetch';\nvar apolloClient = null; // Polyfill fetch() on the server (used by apollo-client)\n\nif (typeof window === 'undefined') {\n  global.fetch = fetch;\n}\n\nfunction create(initialState, _ref) {\n  var getToken = _ref.getToken,\n      fetchOptions = _ref.fetchOptions;\n  var httpLink = createHttpLink({\n    uri: 'http://localhost:8000/graphql',\n    credentials: 'same-origin',\n    fetchOptions: fetchOptions\n  });\n}\n\nexport default function initApollo(initialState, options) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    var fetchOptions = {}; // If you are using a https_proxy, add fetchOptions with 'https-proxy-agent' agent instance\n    // 'https-proxy-agent' is required here because it's a sever-side only module\n\n    return create(initialState, _objectSpread({}, options, {\n      fetchOptions: fetchOptions\n    }));\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = create(initialState, options);\n  }\n\n  return apolloClient;\n}","map":{"version":3,"sources":["/Users/tanapon/graphql-test/login-page-with-graphql/lib/initApollo.js"],"names":["ApolloClient","InMemoryCache","createHttpLink","setContext","fetch","apolloClient","window","global","create","initialState","getToken","fetchOptions","httpLink","uri","credentials","initApollo","options"],"mappings":";AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,cAA5C;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,IAAIC,YAAY,GAAG,IAAnB,C,CAEA;;AACA,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjCC,EAAAA,MAAM,CAACH,KAAP,GAAeA,KAAf;AACD;;AAED,SAASI,MAAT,CAAiBC,YAAjB,QAA2D;AAAA,MAA1BC,QAA0B,QAA1BA,QAA0B;AAAA,MAAhBC,YAAgB,QAAhBA,YAAgB;AACzD,MAAMC,QAAQ,GAAGV,cAAc,CAAC;AAC9BW,IAAAA,GAAG,EAAE,+BADyB;AAE9BC,IAAAA,WAAW,EAAE,aAFiB;AAG9BH,IAAAA,YAAY,EAAZA;AAH8B,GAAD,CAA/B;AAKD;;AAED,eAAe,SAASI,UAAT,CAAqBN,YAArB,EAAmCO,OAAnC,EAA4C;AACzD;AACA;AACA,MAAI,OAAOV,MAAP,KAAkB,WAAtB,EAAmC;AACjC,QAAIK,YAAY,GAAG,EAAnB,CADiC,CAEjC;AACA;;AACA,WAAOH,MAAM,CAACC,YAAD,oBACRO,OADQ;AAEXL,MAAAA,YAAY,EAAZA;AAFW,OAAb;AAID,GAXwD,CAazD;;;AACA,MAAI,CAACN,YAAL,EAAmB;AACjBA,IAAAA,YAAY,GAAGG,MAAM,CAACC,YAAD,EAAeO,OAAf,CAArB;AACD;;AAED,SAAOX,YAAP;AACD","sourcesContent":["import { ApolloClient, InMemoryCache } from 'apollo-boost'\nimport { createHttpLink } from 'apollo-link-http'\nimport { setContext } from 'apollo-link-context'\nimport fetch from 'isomorphic-unfetch'\n\nlet apolloClient = null\n\n// Polyfill fetch() on the server (used by apollo-client)\nif (typeof window === 'undefined') {\n  global.fetch = fetch\n}\n\nfunction create (initialState, { getToken, fetchOptions }) {\n  const httpLink = createHttpLink({\n    uri: 'http://localhost:8000/graphql',\n    credentials: 'same-origin',\n    fetchOptions\n  })\n}\n\nexport default function initApollo (initialState, options) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    let fetchOptions = {}\n    // If you are using a https_proxy, add fetchOptions with 'https-proxy-agent' agent instance\n    // 'https-proxy-agent' is required here because it's a sever-side only module\n    return create(initialState, {\n      ...options,\n      fetchOptions\n    })\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = create(initialState, options)\n  }\n\n  return apolloClient\n}\n"]},"metadata":{},"sourceType":"module"}