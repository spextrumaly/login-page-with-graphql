{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/tanapon/graphql-test/login-page-with-graphql/lib/withData.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { ApolloProvider, getDataFromTree } from 'react-apollo';\nimport Head from 'next/head';\nimport initApollo from './initApollo'; // Gets the display name of a JSX component for dev tools\n\nfunction getComponentDisplayName(Component) {\n  return Component.displayName || Component.name || 'Unknown';\n}\n\nexport default (function (ComposedComponent) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_Component) {\n    _inherits(WithData, _Component);\n\n    _createClass(WithData, null, [{\n      key: \"getInitialProps\",\n      value: function () {\n        var _getInitialProps = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(ctx) {\n          var serverState, composedInitialProps, apollo, url;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  serverState = {}; // evaluate getInitialProps()\n\n                  composedInitialProps = {};\n\n                  if (!ComposedComponent.getInitialProps) {\n                    _context.next = 6;\n                    break;\n                  }\n\n                  _context.next = 5;\n                  return ComposedComponent.getInitialProps(ctx);\n\n                case 5:\n                  composedInitialProps = _context.sent;\n\n                case 6:\n                  if (process.browser) {\n                    _context.next = 18;\n                    break;\n                  }\n\n                  apollo = initApollo(); // url prop if any of our queries needs it\n\n                  url = {\n                    query: ctx.query,\n                    pathname: ctx.pathname\n                  };\n                  _context.prev = 9;\n                  _context.next = 12;\n                  return getDataFromTree(React.createElement(ApolloProvider, {\n                    client: apollo,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 37\n                    },\n                    __self: this\n                  }, React.createElement(ComposedComponent, _extends({\n                    url: url\n                  }, composedInitialProps, {\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 38\n                    },\n                    __self: this\n                  }))));\n\n                case 12:\n                  _context.next = 16;\n                  break;\n\n                case 14:\n                  _context.prev = 14;\n                  _context.t0 = _context[\"catch\"](9);\n\n                case 16:\n                  // getDataFromTree does not call componentWillUnmount\n                  // head side effect therefore need to be cleared manually\n                  Head.rewind(); // Extract query data from the Apollo store\n\n                  serverState = {\n                    apollo: {\n                      data: apollo.cache.extract()\n                    }\n                  };\n\n                case 18:\n                  return _context.abrupt(\"return\", _objectSpread({\n                    serverState: serverState\n                  }, composedInitialProps));\n\n                case 19:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[9, 14]]);\n        }));\n\n        function getInitialProps(_x) {\n          return _getInitialProps.apply(this, arguments);\n        }\n\n        return getInitialProps;\n      }()\n    }]);\n\n    function WithData(props) {\n      var _this;\n\n      _classCallCheck(this, WithData);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(WithData).call(this, props));\n      _this.apollo = initApollo(_this.props.serverState);\n      return _this;\n    }\n\n    _createClass(WithData, [{\n      key: \"render\",\n      value: function render() {\n        return React.createElement(ApolloProvider, {\n          client: this.apollo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, React.createElement(ComposedComponent, _extends({}, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        })));\n      }\n    }]);\n\n    return WithData;\n  }(Component), _defineProperty(_class, \"displayName\", \"WithData(\".concat(getComponentDisplayName(ComposedComponent), \")\")), _defineProperty(_class, \"propTypes\", {\n    serverState: PropTypes.object.isRequired\n  }), _temp;\n});","map":{"version":3,"sources":["/Users/tanapon/graphql-test/login-page-with-graphql/lib/withData.js"],"names":["React","Component","PropTypes","ApolloProvider","getDataFromTree","Head","initApollo","getComponentDisplayName","displayName","name","ComposedComponent","ctx","serverState","composedInitialProps","getInitialProps","process","browser","apollo","url","query","pathname","rewind","data","cache","extract","props","object","isRequired"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,cAAhD;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAEA;;AACA,SAASC,uBAAT,CAAkCN,SAAlC,EAA6C;AAC3C,SAAOA,SAAS,CAACO,WAAV,IAAyBP,SAAS,CAACQ,IAAnC,IAA2C,SAAlD;AACD;;AAED,gBAAe,UAAAC,iBAAiB,EAAI;AAAA;;AAClC;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAMgCC,GANhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAOQC,kBAAAA,WAPR,GAOsB,EAPtB,EASI;;AACIC,kBAAAA,oBAVR,GAU+B,EAV/B;;AAAA,uBAWQH,iBAAiB,CAACI,eAX1B;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAYmCJ,iBAAiB,CAACI,eAAlB,CAAkCH,GAAlC,CAZnC;;AAAA;AAYME,kBAAAA,oBAZN;;AAAA;AAAA,sBAgBSE,OAAO,CAACC,OAhBjB;AAAA;AAAA;AAAA;;AAiBYC,kBAAAA,MAjBZ,GAiBqBX,UAAU,EAjB/B,EAkBM;;AACMY,kBAAAA,GAnBZ,GAmBkB;AAAEC,oBAAAA,KAAK,EAAER,GAAG,CAACQ,KAAb;AAAoBC,oBAAAA,QAAQ,EAAET,GAAG,CAACS;AAAlC,mBAnBlB;AAAA;AAAA;AAAA,yBAuBchB,eAAe,CACnB,oBAAC,cAAD;AAAgB,oBAAA,MAAM,EAAEa,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACE,oBAAC,iBAAD;AAAmB,oBAAA,GAAG,EAAEC;AAAxB,qBAAiCL,oBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,CADmB,CAvB7B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAiCM;AACA;AACAR,kBAAAA,IAAI,CAACgB,MAAL,GAnCN,CAqCM;;AACAT,kBAAAA,WAAW,GAAG;AACZK,oBAAAA,MAAM,EAAE;AACNK,sBAAAA,IAAI,EAAEL,MAAM,CAACM,KAAP,CAAaC,OAAb;AADA;AADI,mBAAd;;AAtCN;AAAA;AA8CMZ,oBAAAA,WAAW,EAAXA;AA9CN,qBA+CSC,oBA/CT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAmDE,sBAAaY,KAAb,EAAoB;AAAA;;AAAA;;AAClB,oFAAMA,KAAN;AACA,YAAKR,MAAL,GAAcX,UAAU,CAAC,MAAKmB,KAAL,CAAWb,WAAZ,CAAxB;AAFkB;AAGnB;;AAtDH;AAAA;AAAA,+BAwDY;AACR,eACE,oBAAC,cAAD;AAAgB,UAAA,MAAM,EAAE,KAAKK,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,iBAAD,eAAuB,KAAKQ,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF,CADF;AAKD;AA9DH;;AAAA;AAAA,IAA8BxB,SAA9B,6DACmCM,uBAAuB,CAACG,iBAAD,CAD1D,8CAEqB;AACjBE,IAAAA,WAAW,EAAEV,SAAS,CAACwB,MAAV,CAAiBC;AADb,GAFrB;AAgED,CAjED","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { ApolloProvider, getDataFromTree } from 'react-apollo'\nimport Head from 'next/head'\nimport initApollo from './initApollo'\n\n// Gets the display name of a JSX component for dev tools\nfunction getComponentDisplayName (Component) {\n  return Component.displayName || Component.name || 'Unknown'\n}\n\nexport default ComposedComponent => {\n  return class WithData extends Component {\n    static displayName = `WithData(${getComponentDisplayName(ComposedComponent)})`\n    static propTypes = {\n      serverState: PropTypes.object.isRequired\n    }\n\n    static async getInitialProps (ctx) {\n      let serverState = {}\n\n      // evaluate getInitialProps()\n      let composedInitialProps = {}\n      if (ComposedComponent.getInitialProps) {\n        composedInitialProps = await ComposedComponent.getInitialProps(ctx)\n      }\n\n      // Running all queries in the tree extracting the data\n      if (!process.browser) {\n        const apollo = initApollo()\n        // url prop if any of our queries needs it\n        const url = { query: ctx.query, pathname: ctx.pathname }\n\n        try {\n          // Run all GraphQL queries\n          await getDataFromTree(\n            <ApolloProvider client={apollo}>\n              <ComposedComponent url={url} {...composedInitialProps} />\n            </ApolloProvider>\n          )\n        } catch (error) {\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\n          // Handle them in components via the data.error prop:\n          // http://dev.apollodata.com/react/api-queries.html#graphql-query-data-error\n        }\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind()\n\n        // Extract query data from the Apollo store\n        serverState = {\n          apollo: {\n            data: apollo.cache.extract()\n          }\n        }\n      }\n\n      return {\n        serverState,\n        ...composedInitialProps\n      }\n    }\n\n    constructor (props) {\n      super(props)\n      this.apollo = initApollo(this.props.serverState)\n    }\n\n    render () {\n      return (\n        <ApolloProvider client={this.apollo}>\n          <ComposedComponent {...this.props} />\n        </ApolloProvider>\n      )\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}